---
# tasks file for reaper
- name: Ensure repo for reaper is present
  yum_repository:
    name: bintray-thelastpickle-reaper-rpm
    description: bintray-thelastpickle-reaper-rpm
    baseurl: https://dl.bintray.com/thelastpickle/reaper-rpm
    enabled: yes
    gpgcheck: no
  register: yum_repo

- name: Ensure epel is available
  yum:
    name: epel-release
    state: present
  register: epel

- name: Clear yum cache
  shell: yum clean all
  when: yum_repo.changed == True or epel.changed == True

- name: Add Cassandra Repository
  yum_repository:
    name: Cassandra
    description: Cassandra
    baseurl: "{{ cassandra_yum_repo_url }}"
    gpgcheck: 1
    gpgkey: "{{ cassandra_yum_repo_gpgkey_url }}"
    state: present

- name: Install additional packages
  yum:
    name: "{{ additional_packages }}"
    state: present

- name: Install Cassandra & Tools
  yum:
    name: "{{ cassandra_packages }}"
    state: present

- name: Set  authenticator in cassandra.yaml
  lineinfile:
    path: "/etc/cassandra/conf/cassandra.yaml"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { "regexp": "^authenticator:*", "line": "authenticator: PasswordAuthenticator" }
    - { "regexp": "^authorizer:*", "line": "authorizer: CassandraAuthorizer" }
    - { "regexp": "^cluster_name:*", "line": "cluster_name: Reaper" }
    - { "regexp": "^cluster_name:*", "line": "cluster_name: Reaper" }
    - { "regexp": "^listen_iddress:*", "line": "listen_address: {{ ansible_eth1.ipv4.address }}" }
    - { "regexp": "^listen_iddress:*", "line": "listen_address: {{ ansible_eth1.ipv4.address }}" }
    - { "regexp": "^rpc_address:*", "line": "rpc_address: {{ ansible_eth1.ipv4.address }}" }
    - { "regexp": "^          - seeds: *", "line": "          - seeds: '192.168.43.201,192.168.43.202'" }
  register: config_change

- name: Restart cassandra service
  service:
    name: "cassandra"
    state: "restarted"
    enabled: "yes"
  when: config_change.changed == True

- name: Ensure C* is active
  wait_for:
    port: 9042
    host: "{{ ansible_eth1.ipv4.address }}"

- stat:
    path: /home/vagrant/cass_user.success
    get_checksum: no
  register: cass_user

- name: Create cql file to create C* admin user
  template:
    src: create_admin_user.cql.j2
    dest: /home/vagrant/create_admin_user.cql
  when: cass_user.stat.exists == False

- name: Run admin user script
  shell: cqlsh -u cassandra -p cassandra -f /home/vagrant/create_admin_user.cql && rm /home/vagrant/create_admin_user.cql && touch /home/vagrant/cass_user.success
  args:
    creates: /home/vagrant/cass_user.success
  environment:
    CQLSH_HOST: "{{ ansible_eth1.ipv4.address }}"
